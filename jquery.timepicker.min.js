(function (a) { if (typeof define === "function" && define.amd) { define(["jquery"], a) } else { a(jQuery) } }(function (h) { var m = c(); var k = 86400; var r = { className: null, minTime: null, maxTime: null, durationTime: null, step: 30, showDuration: false, timeFormat: "g:ia", scrollDefaultNow: false, scrollDefaultTime: false, selectOnBlur: false, disableTouchKeyboard: true, forceRoundTime: false, appendTo: "body", disableTimeRanges: [], closeOnWindowScroll: false, disableTextInput: false, placeholder: "" }; var p = { decimal: ".", mins: "mins", hr: "hr", hrs: "hrs" }; var t = { init: function (x) { return this.each(function () { var A = h(this); if (A[0].tagName == "SELECT") { var B = { type: "text", value: A.val() }; var y = A[0].attributes; for (var C = 0; C < y.length; C++) { B[y[C].nodeName] = y[C].nodeValue } var z = h("<input />", B); A.replaceWith(z); A = z } var D = h.extend({}, r); if (x) { D = h.extend(D, x) } if (D.lang) { p = h.extend(p, D.lang) } D = g(D); A.prop("placeholder", D.placeholder); A.data("timepicker-settings", D); A.prop("autocomplete", "off"); A.on("click.timepicker focus.timepicker", t.show); A.on("blur.timepicker", f); A.on("keydown.timepicker", i); A.on("keyup.timepicker", w); A.addClass("ui-timepicker-input"); f.call(A.get(0)) }) }, show: function (C) { var x = h(this); var A = x.data("timepicker-settings"); if ("ontouchstart" in document && A.disableTouchKeyboard) { x.blur() } var B = x.data("timepicker-list"); if (x.prop("readonly")) { return } if (!B || B.length === 0) { j(x); B = x.data("timepicker-list") } if (B.is(":visible")) { return } t.hide(); B.show(); if ((x.offset().top + x.outerHeight(true) + B.outerHeight()) > h(window).height() + h(window).scrollTop()) { B.offset({ left: x.offset().left + parseInt(B.css("marginLeft").replace("px", ""), 10), top: x.offset().top - B.outerHeight() + parseInt(B.css("marginTop").replace("px", ""), 10) }) } else { B.offset({ left: x.offset().left + parseInt(B.css("marginLeft").replace("px", ""), 10), top: x.offset().top + x.outerHeight() + parseInt(B.css("marginTop").replace("px", ""), 10) }) } var z = B.find(".ui-timepicker-selected"); if (!z.length) { if (a(x)) { z = e(x, B, o(a(x))) } else { if (A.scrollDefaultNow) { z = e(x, B, o(new Date())) } else { if (A.scrollDefaultTime !== false) { z = e(x, B, o(A.scrollDefaultTime)) } } } } if (z && z.length) { var y = B.scrollTop() + z.position().top - z.outerHeight(); B.scrollTop(y) } else { B.scrollTop(0) } s(A); x.trigger("showTimepicker") }, hide: function (x) { h(".ui-timepicker-wrapper:visible").each(function () { var A = h(this); var y = A.data("timepicker-input"); var z = y.data("timepicker-settings"); if (z && z.selectOnBlur) { l(y) } A.hide(); y.trigger("hideTimepicker") }) }, option: function (y, B) { var x = this; var z = x.data("timepicker-settings"); var A = x.data("timepicker-list"); if (typeof y == "object") { z = h.extend(z, y) } else { if (typeof y == "string" && typeof B != "undefined") { z[y] = B } else { if (typeof y == "string") { return z[y] } } } z = g(z); x.data("timepicker-settings", z); if (A) { A.remove(); x.data("timepicker-list", false) } return x }, getSecondsFromMidnight: function () { return o(a(this)) }, getTime: function () { var y = this; var x = new Date(); x.setHours(0, 0, 0, 0); return new Date(x.valueOf() + (o(a(y)) * 1000)) }, setTime: function (y) { var x = this; var z = v(o(y), x.data("timepicker-settings").timeFormat); d(x, z) }, remove: function () { var x = this; if (!x.hasClass("ui-timepicker-input")) { return } x.removeAttr("autocomplete", "off"); x.removeClass("ui-timepicker-input"); x.removeData("timepicker-settings"); x.off(".timepicker"); if (x.data("timepicker-list")) { x.data("timepicker-list").remove() } x.removeData("timepicker-list") } }; function g(y) { if (y.minTime) { y.minTime = o(y.minTime) } if (y.maxTime) { y.maxTime = o(y.maxTime) } if (y.durationTime) { y.durationTime = o(y.durationTime) } if (y.disableTimeRanges.length > 0) { for (var x in y.disableTimeRanges) { y.disableTimeRanges[x] = [o(y.disableTimeRanges[x][0]), o(y.disableTimeRanges[x][1])] } y.disableTimeRanges = y.disableTimeRanges.sort(function (A, z) { return A[0] - z[0] }) } return y } function j(K) { var A = K.data("timepicker-settings"); var H = K.data("timepicker-list"); if (H && H.length) { H.remove(); K.data("timepicker-list", false) } H = h("<ul />", { "class": "ui-timepicker-list" }); var F = h("<div />", { "class": "ui-timepicker-wrapper", tabindex: -1 }); F.css({ display: "none", position: "absolute" }).append(H); if (A.className) { F.addClass(A.className) } if ((A.minTime !== null || A.durationTime !== null) && A.showDuration) { F.addClass("ui-timepicker-with-duration") } var G = (A.durationTime !== null) ? A.durationTime : A.minTime; var x = (A.minTime !== null) ? A.minTime : 0; var C = (A.maxTime !== null) ? A.maxTime : (x + k - 1); if (C <= x) { C += k } var z = A.disableTimeRanges; var E = 0; var y = z.length; for (var D = x; D <= C; D += A.step * 60) { var J = D % k; var L = h("<li />"); L.data("time", J); L.text(v(J, A.timeFormat)); if ((A.minTime !== null || A.durationTime !== null) && A.showDuration) { var B = h("<span />"); B.addClass("ui-timepicker-duration"); B.text(" (" + b(D - G) + ")"); L.append(B) } if (E < y) { if (J >= z[E][0] && J < z[E][1]) { L.addClass("ui-timepicker-disabled") } else { if (J >= z[E][1]) { E += 1 } } } H.append(L) } F.data("timepicker-input", K); K.data("timepicker-list", F); var I = A.appendTo; if (typeof I === "string") { I = h(I) } else { if (typeof I === "function") { I = I(K) } } I.append(F); q(K, H); H.on("click", "li", function (M) { K.off("focus.timepicker"); K.on("focus.timepicker-ie-hack", function () { K.off("focus.timepicker-ie-hack"); K.on("focus.timepicker", t.show) }); K[0].focus(); H.find("li").removeClass("ui-timepicker-selected"); h(this).addClass("ui-timepicker-selected"); if (l(K)) { F.hide() } }) } function c() { return new Date(1970, 1, 1, 0, 0, 0) } function s(x) { if ("ontouchstart" in document) { h("body").on("touchstart.ui-timepicker", n) } else { h("body").on("mousedown.ui-timepicker", n); if (x.closeOnWindowScroll) { h(window).on("scroll.ui-timepicker", n) } } } function n(z) { var y = h(z.target); var x = y.closest(".ui-timepicker-input"); if (x.length === 0 && y.closest(".ui-timepicker-wrapper").length === 0) { t.hide(); h("body").unbind(".ui-timepicker"); h(window).unbind(".ui-timepicker") } } function e(x, C, B) { if (!B && B !== 0) { return false } var z = x.data("timepicker-settings"); var y = false; var A = z.step * 30; C.find("li").each(function (D, F) { var E = h(F); var G = E.data("time") - B; if (Math.abs(G) < A || G == A) { y = E; return false } }); return y } function q(y, B) { B.find("li").removeClass("ui-timepicker-selected"); var A = o(a(y)); if (!A) { return } var z = e(y, B, A); if (z) { var x = z.offset().top - B.offset().top; if (x + z.outerHeight() > B.outerHeight() || x < 0) { B.scrollTop(B.scrollTop() + z.position().top - z.outerHeight()) } z.addClass("ui-timepicker-selected") } } function f() { if (this.value === "") { return } var x = h(this); var B = o(this.value); if (B === null) { x.trigger("timeFormatError"); return } var y = x.data("timepicker-settings"); if (y.minTime !== null && B < y.minTime) { x.trigger("timeRangeError") } else { if (y.maxTime !== null && B > y.maxTime) { x.trigger("timeRangeError") } } h.each(y.disableTimeRanges, function () { if (B >= this[0] && B < this[1]) { x.trigger("timeRangeError"); return false } }); if (y.forceRoundTime) { var A = B % (y.step * 60); if (A >= y.step * 30) { B += (y.step * 60) - A } else { B -= A } } var z = v(B, y.timeFormat); d(x, z) } function a(x) { if (x.is("input")) { return x.val() } else { return x.data("ui-timepicker-value") } } function d(x, y) { if (x.is("input")) { x.val(y) } else { x.data("ui-timepicker-value", y) } } function i(A) { var x = h(this); var z = x.data("timepicker-list"); if (!z || !z.is(":visible")) { if (A.keyCode == 40) { x.focus() } else { return true } } switch (A.keyCode) { case 13: if (l(x)) { t.hide.apply(this) } A.preventDefault(); return false; case 38: var y = z.find(".ui-timepicker-selected"); if (!y.length) { z.find("li").each(function (B, C) { if (h(C).position().top > 0) { y = h(C); return false } }); y.addClass("ui-timepicker-selected") } else { if (!y.is(":first-child")) { y.removeClass("ui-timepicker-selected"); y.prev().addClass("ui-timepicker-selected"); if (y.prev().position().top < y.outerHeight()) { z.scrollTop(z.scrollTop() - y.outerHeight()) } } } return false; case 40: y = z.find(".ui-timepicker-selected"); if (y.length === 0) { z.find("li").each(function (B, C) { if (h(C).position().top > 0) { y = h(C); return false } }); y.addClass("ui-timepicker-selected") } else { if (!y.is(":last-child")) { y.removeClass("ui-timepicker-selected"); y.next().addClass("ui-timepicker-selected"); if (y.next().position().top + 2 * y.outerHeight() > z.outerHeight()) { z.scrollTop(z.scrollTop() + y.outerHeight()) } } } return false; case 27: z.find("li").removeClass("ui-timepicker-selected"); z.hide(); break; case 9: t.hide(); break; default: return !x.data("timepicker-settings").disableTextInput } } function w(z) { var x = h(this); var y = x.data("timepicker-list"); if (!y || !y.is(":visible")) { return true } switch (z.keyCode) { case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 65: case 77: case 80: case 186: case 8: case 46: q(x, y); break; default: return } } function l(x) { var A = x.data("timepicker-settings"); var B = x.data("timepicker-list"); var z = null; var C = B.find(".ui-timepicker-selected"); if (C.hasClass("ui-timepicker-disabled")) { return false } if (C.length) { z = C.data("time") } else { if (a(x)) { z = o(a(x)); q(x, B) } } if (z !== null) { var y = v(z, A.timeFormat); d(x, y) } x.trigger("change").trigger("changeTime"); return true } function b(A) { var y = Math.round(A / 60); var z; if (Math.abs(y) < 60) { z = [y, p.mins] } else { if (y == 60) { z = ["1", p.hr] } else { var x = (y / 60).toFixed(1); if (p.decimal != ".") { x = x.replace(".", p.decimal) } z = [x, p.hrs] } } return z.join(" ") } function v(E, D) { if (E === null) { return } var C = new Date(m.valueOf() + (E * 1000)); var y = ""; var x, B; for (var A = 0; A < D.length; A++) { B = D.charAt(A); switch (B) { case "a": y += (C.getHours() > 11) ? "pm" : "am"; break; case "A": y += (C.getHours() > 11) ? "PM" : "AM"; break; case "g": x = C.getHours() % 12; y += (x === 0) ? "12" : x; break; case "G": y += C.getHours(); break; case "h": x = C.getHours() % 12; if (x !== 0 && x < 10) { x = "0" + x } y += (x === 0) ? "12" : x; break; case "H": x = C.getHours(); y += (x > 9) ? x : "0" + x; break; case "i": var z = C.getMinutes(); y += (z > 9) ? z : "0" + z; break; case "s": E = C.getSeconds(); y += (E > 9) ? E : "0" + E; break; default: y += B } } return y } function o(A) { if (A === "") { return null } if (!A || A + 0 == A) { return A } if (typeof (A) == "object") { A = A.getHours() + ":" + u(A.getMinutes()) + ":" + u(A.getSeconds()) } A = A.toLowerCase(); var D = new Date(0); var B; if (A.indexOf(":") === -1) { B = A.match(/^([0-9]):?([0-5][0-9])?:?([0-5][0-9])?\s*([pa]?)m?$/); if (!B) { B = A.match(/^([0-2][0-9]):?([0-5][0-9])?:?([0-5][0-9])?\s*([pa]?)m?$/) } } else { B = A.match(/^(\d{1,2})(?::([0-5][0-9]))?(?::([0-5][0-9]))?\s*([pa]?)m?$/) } if (!B) { return null } var y = parseInt(B[1] * 1, 10); var x; if (B[4]) { if (y == 12) { x = (B[4] == "p") ? 12 : 0 } else { x = (y + (B[4] == "p" ? 12 : 0)) } } else { x = y } var z = (B[2] * 1 || 0); var C = (B[3] * 1 || 0); return x * 3600 + z * 60 + C } function u(x) { return ("0" + x).slice(-2) } h.fn.timepicker = function (x) { if (t[x]) { return t[x].apply(this, Array.prototype.slice.call(arguments, 1)) } else { if (typeof x === "object" || !x) { return t.init.apply(this, arguments) } else { h.error("Method " + x + " does not exist on jQuery.timepicker") } } } }));